#
#
"""
This data service is useless if the WS-3000 is configured as the primary weewx station. It is
designed to combine the data from the WS-3000 station with the data from another primary station.
What is does it simply to fetch the data from the WS-3000 every time weewx generates an archive record,
and add the values to the packet generated by the primary station.

NOTE: it is also possible to add the WS-3000 data to loop packets. Simply uncomment the line:
# self.bind(weewx.NEW_LOOP_PACKET, self.update_packet)
But note that if the loop packets are generated to often this can lead to issues with the WS-3000.
Also note that the WS-3000 has no concept of loop or archive packets, it is only possible to read the current
value.

IMPORTANT: Do NOT configure the WS-3000 as the primary station in weewx AND enable the Data Service => this
would result in issues (the driver get initialized twice).
If you don't need the Data Service, do not deploy it in weewx's folder to avoid any issue.

"""

import weewx
import sys
from weewx import units
from weewx.engine import StdService
import time
#import syslog
import logging


log = logging.getLogger(__name__)


def logmsg(level, msg):
    # syslog.syslog(level, 'ws3000: %s' % msg)
    log.debug(msg)


def logdbg(msg):
    # logmsg(syslog.LOG_DEBUG, msg)
    log.debug(msg)


def loginf(msg):
    # logmsg(syslog.LOG_INFO, msg)
    log.info(msg)


def logerr(msg):
    # logmsg(syslog.LOG_ERR, msg)
    log.error(msg)


class AddWS300Data(StdService):

    def __init__(self, engine, config_dict):
        # Initialize my superclass first:
        super(AddWS300Data, self).__init__(engine, config_dict)

        # Bind to any new archive record events and new loop record events
        # TODO: selecting to which events to bind should be done via configuration
        self.bind(weewx.NEW_ARCHIVE_RECORD, self.update_record)
        # self.bind(weewx.NEW_LOOP_PACKET, self.update_packet)

        # Load WS3000 driver
        driver = config_dict['WS3000']['driver']
        __import__(driver)
        driver_module = sys.modules[driver]
        loader_function = getattr(driver_module, 'loader')
        self.ws3000 = loader_function(config_dict, self)

        self.converter = None

    def init_converter(self, wspacket):
        """Used to initialize the unit converted.
        Data is coming from WS3000 using METRICWX, and must be converted to the units using in the
        weewx packet for consistency."""
        if self.converter is None:
            target_unit = wspacket['usUnits']
            self.converter = weewx.units.StdUnitConverters[target_unit]

    def update_record(self, event):
        """Event handler for record packets.
        Currently the service is no able to fetch historical data, it can only read current sensors values.
        Records are therefore updated only if the record's time is matching current time to avoid backfilling
        the DB with incorrect values."""
        current_time = int(time.time() + 0.5)
        loginf("update_record invoked. Current time: " + str(current_time) + ". Record time: " + str(event.record['dateTime']))
        delta = 59  # 30 seconds delta. TODO: should be a configuration setting, to review
        if current_time - delta < event.record['dateTime'] < current_time + 5:  # clock could be up to 5 seconds early
            loginf("delta ok, updating record")
            self.update_dict(event.record)

    def update_packet(self, event):
        """Event handler for loop packets"""
        self.update_dict(event.packet)

    def update_dict(self, wxpacket):
        """Function that copies data from the WS3000 packet to the weewx packet."""
        self.init_converter(wxpacket)
        wspacket = self.ws3000.get_current_values()
        loginf("ws3000 data:" + str(wspacket))
        converted_packet = self.converter.convertDict(wspacket)
        # logdbg(wxpacket)
        for key in converted_packet.keys():
                wxpacket[key] = converted_packet[key]
